/**
 * Ïª§ÎÆ§ÎãàÌã∞ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
 *
 * Ïù¥ ÌååÏùºÏùÄ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï†ÑÎ∞òÏóêÏÑú ÏÇ¨Ïö©ÎêòÎäî Ìó¨Ìçº Ìï®ÏàòÎì§ÏùÑ Ìè¨Ìï®Ìï©ÎãàÎã§.
 */

import { PostCategory, Platform } from "../types";

/**
 * Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌïúÍ∏Ä Ïù¥Î¶Ñ Î∞òÌôò
 */
export const getCategoryName = (category: PostCategory): string => {
  const categoryNames: Record<PostCategory, string> = {
    ott: "OTT",
    youtube: "Ïú†ÌäúÎ∏å",
    webtoon: "ÏõπÌà∞",
    movie: "ÏòÅÌôî",
    drama: "ÎìúÎùºÎßà",
    anime: "Ïï†ÎãàÎ©îÏù¥ÏÖò",
    book: "Ï±Ö",
    game: "Í≤åÏûÑ",
    music: "ÏùåÏïÖ",
    other: "Í∏∞ÌÉÄ",
  };

  return categoryNames[category];
};

/**
 * ÌîåÎû´ÌèºÎ≥Ñ ÌïúÍ∏Ä Ïù¥Î¶Ñ Î∞òÌôò
 */
export const getPlatformName = (platform: Platform): string => {
  const platformNames: Record<Platform, string> = {
    netflix: "ÎÑ∑ÌîåÎ¶≠Ïä§",
    "disney-plus": "ÎîîÏ¶àÎãà+",
    tving: "Ìã∞Îπô",
    wavve: "Ïõ®Ïù¥Î∏å",
    youtube: "Ïú†ÌäúÎ∏å",
    "naver-webtoon": "ÎÑ§Ïù¥Î≤Ñ ÏõπÌà∞",
    "kakao-webtoon": "Ïπ¥Ïπ¥Ïò§ ÏõπÌà∞",
    theater: "ÏòÅÌôîÍ¥Ä",
    tv: "TV",
    spotify: "Ïä§Ìè¨Ìã∞ÌååÏù¥",
    melon: "Î©úÎ°†",
    steam: "Ïä§ÌåÄ",
    other: "Í∏∞ÌÉÄ",
  };

  return platformNames[platform];
};

/**
 * ÌîåÎû´ÌèºÎ≥Ñ ÏÉâÏÉÅ Î∞òÌôò
 */
export const getPlatformColor = (platform: Platform): string => {
  const platformColors: Record<Platform, string> = {
    netflix: "bg-red-500",
    "disney-plus": "bg-blue-600",
    tving: "bg-green-500",
    wavve: "bg-purple-500",
    youtube: "bg-red-600",
    "naver-webtoon": "bg-green-600",
    "kakao-webtoon": "bg-yellow-500",
    theater: "bg-gray-600",
    tv: "bg-blue-500",
    spotify: "bg-green-400",
    melon: "bg-yellow-400",
    steam: "bg-gray-700",
    other: "bg-gray-500",
  };

  return platformColors[platform];
};

/**
 * Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏïÑÏù¥ÏΩò Î∞òÌôò
 */
export const getCategoryIcon = (category: PostCategory): string => {
  const categoryIcons: Record<PostCategory, string> = {
    ott: "üì∫",
    youtube: "üìπ",
    webtoon: "üìñ",
    movie: "üé¨",
    drama: "üì∫",
    anime: "üéå",
    book: "üìö",
    game: "üéÆ",
    music: "üéµ",
    other: "üìå",
  };

  return categoryIcons[category];
};

/**
 * ÎÇ†ÏßúÎ•º ÏÉÅÎåÄÏ†Å ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò (Ïòà: "3ÏãúÍ∞Ñ Ï†Ñ", "2Ïùº Ï†Ñ")
 */
export const formatRelativeTime = (date: Date): string => {
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (diffInSeconds < 60) {
    return "Î∞©Í∏à Ï†Ñ";
  }

  const diffInMinutes = Math.floor(diffInSeconds / 60);
  if (diffInMinutes < 60) {
    return `${diffInMinutes}Î∂Ñ Ï†Ñ`;
  }

  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) {
    return `${diffInHours}ÏãúÍ∞Ñ Ï†Ñ`;
  }

  const diffInDays = Math.floor(diffInHours / 24);
  if (diffInDays < 7) {
    return `${diffInDays}Ïùº Ï†Ñ`;
  }

  const diffInWeeks = Math.floor(diffInDays / 7);
  if (diffInWeeks < 4) {
    return `${diffInWeeks}Ï£º Ï†Ñ`;
  }

  const diffInMonths = Math.floor(diffInDays / 30);
  if (diffInMonths < 12) {
    return `${diffInMonths}Í∞úÏõî Ï†Ñ`;
  }

  const diffInYears = Math.floor(diffInDays / 365);
  return `${diffInYears}ÎÖÑ Ï†Ñ`;
};

/**
 * Ïà´ÏûêÎ•º K, M Îã®ÏúÑÎ°ú Ìè¨Îß∑ÌåÖ (Ïòà: 1000 -> 1K, 1500000 -> 1.5M)
 */
export const formatNumber = (num: number): string => {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1).replace(/\.0$/, "") + "M";
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1).replace(/\.0$/, "") + "K";
  }
  return num.toString();
};

/**
 * Î≥ÑÏ†êÏùÑ Î≥Ñ Ïù¥Î™®ÏßÄÎ°ú Î≥ÄÌôò
 */
export const getRatingStars = (rating: number): string => {
  const fullStar = "‚≠ê";
  const emptyStar = "‚òÜ";
  const maxStars = 5;

  const fullStars = Math.floor(rating);
  const emptyStars = maxStars - fullStars;

  return fullStar.repeat(fullStars) + emptyStar.repeat(emptyStars);
};

/**
 * ÌÅ¥ÎûòÏä§Î™ÖÏùÑ Ï°∞Í±¥Î∂ÄÎ°ú Í≤∞Ìï©
 */
export const cn = (
  ...classes: (string | undefined | null | false)[]
): string => {
  return classes.filter(Boolean).join(" ");
};

/**
 * ÌÖçÏä§Ìä∏Î•º ÏßÄÏ†ïÎêú Í∏∏Ïù¥Î°ú ÏûêÎ•¥Í≥† ÎßêÏ§ÑÏûÑÌëú Ï∂îÍ∞Ä
 */
export const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) {
    return text;
  }
  return text.slice(0, maxLength) + "...";
};

/**
 * Ïù¥Î©îÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
 */
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

/**
 * ÎπÑÎ∞ÄÎ≤àÌò∏ Í∞ïÎèÑ Í≤ÄÏÇ¨
 */
export const checkPasswordStrength = (
  password: string
): {
  score: number;
  feedback: string;
} => {
  let score = 0;
  const feedback: string[] = [];

  if (password.length >= 8) {
    score += 1;
  } else {
    feedback.push("ÏµúÏÜå 8Ïûê Ïù¥ÏÉÅ");
  }

  if (/[a-z]/.test(password)) {
    score += 1;
  } else {
    feedback.push("ÏÜåÎ¨∏Ïûê Ìè¨Ìï®");
  }

  if (/[A-Z]/.test(password)) {
    score += 1;
  } else {
    feedback.push("ÎåÄÎ¨∏Ïûê Ìè¨Ìï®");
  }

  if (/[0-9]/.test(password)) {
    score += 1;
  } else {
    feedback.push("Ïà´Ïûê Ìè¨Ìï®");
  }

  if (/[^A-Za-z0-9]/.test(password)) {
    score += 1;
  } else {
    feedback.push("ÌäπÏàòÎ¨∏Ïûê Ìè¨Ìï®");
  }

  return {
    score,
    feedback: feedback.join(", "),
  };
};

/**
 * Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
 */
export const setLocalStorage = (key: string, value: unknown): void => {
  if (typeof window !== "undefined") {
    localStorage.setItem(key, JSON.stringify(value));
  }
};

/**
 * Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
 */
export const getLocalStorage = <T>(key: string, defaultValue?: T): T | null => {
  if (typeof window !== "undefined") {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue || null;
  }
  return defaultValue || null;
};

/**
 * Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
 */
export const removeLocalStorage = (key: string): void => {
  if (typeof window !== "undefined") {
    localStorage.removeItem(key);
  }
};
